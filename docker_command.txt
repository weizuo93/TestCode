
						*****************************************************************************	
						*									    *									
						*			          Docker 命令                               *
						*									    *
						*****************************************************************************

docker pull [选项] [Docker Registry 地址[:端口号]/]仓库名[:标签]                                           # 获取镜像
注：Docker镜像仓库地址的格式一般是“<域名/IP>[:端口号]”，默认地址是Docker Hub(docker.io)。仓库名是两段式名称，即“<用户名>/<软件名>”，对于Docker Hub，如果不给出用户名，则默认为library，也就是官方镜像。

docker run -it <镜像名称> /bin/bash                                                                       # 以镜像为基础启动并运行容器
docker run -it -v <本机目录>:<容器目录> --name=<容器名称> <镜像ID> /bin/bash                               # 以镜像为基础启动并运行容器，同时将容器目录与本机目录建立关联
注：一般情况下，<容器目录>不要设为“/root”，否则，容器启动之后终端提示符会变成“bash-4.2$”，而不是期望的“[root@1a150ef6c859 ~]#”。因为终端提示符“[root@1a150ef6c859 ~]#”依赖于“/root”目录下的一些配置文件
   （.bash_profile、.bashrc），如果将容器中的“/root”目录关联本机中的某个空白目录，会导致“/root”目录也是空白目录，所以会出现终端提示符为变成“bash-4.2$”的情况。
docker run -it --cap-add SYS_PTRACE --privileged=true -v <本机目录>:<容器目录> <镜像名称> /bin/bash        # 以镜像为基础启动并运行容器，同时将容器目录与本机目录建立关联
注：“-it”是两个参数，一个是-i（交互式操作），一个是-t（终端），可以进入bash执行一些命令并查看返回结果，因此我们需要交互式终端。
    “--rm”参数可以让容器退出后随之将其删除；默认情况下，退出的容器并不会立即删除，除非手动 docker rm。

docker ps                                                                                                 # 列出所有正在运行的容器
docker ps -a                                                                                              # 列出所有容器（包括已停止的容器）

docker start <CONTAINER ID|NAME>                                                                          # 启动容器
docker stop <CONTAINER ID|NAME>                                                                           # 停止容器

docker exec -i -t <CONTAINER ID|NAME> /bin/bash                                                           # 执行容器（执行容器之前需要先启动容器）

docker rm <CONTAINER ID|NAME> <CONTAINER ID|NAME> ...                                                     # 删除容器（删除容器之前需要先停止容器）
docker rm $(docker ps -a -q)                                                                              # 一次删除所有所有停止的容器

docker images                                                                                             # 列出本机中的所有docker镜像
注：每一个docker镜像对应的属性依次为：REPOSITORY（镜像的仓库源）、TAG（镜像的标签）、IMAGE ID（镜像ID）、CREATED（镜像创建时间）以及SIZE（镜像大小）。同一仓库源可以有多个 TAG，代表这个仓库源镜像的不同个版本。

docker rmi <镜像ID> <镜像ID> ...                                                                           # 删除镜像（删除镜像之前需要先删除当前镜像创建的容器）

docker commit -m="<描述信息>" -a="<作者名称>" <容器ID> <镜像仓库名>:<镜像标签>                               # 根据已经存在的容器创建镜像（创建镜像时必须先通过exit命令退出容器）
例如： docker commit -a="weizuo" -m="update brpc lib" d39f94dc563f cr.d.xxxxxx.net/doris/doris:1.2-mdh-1.0

docker tag <镜像仓库名>:<镜像标签>  <新的镜像仓库名>:<新的镜像标签>                                          # 重命名镜像仓库和镜像标签
例如： docker tag busybox:latest cr.d.xxxxxx.net/weizuo/busybox:latest

docker push <镜像仓库名>:<镜像标签>                                                                         # 将本地镜像push到镜像的远程仓库
例如： docker push cr.d.xxxxxx.net/doris/doris:1.2-mdh-1.0


    
